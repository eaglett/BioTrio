@GetMapping(value = "/movies/showings/reserve/{showingId}")
    public String reserve(Model model, @PathVariable int showingId) {

        model.addAttribute("movie", movieRepo.findMovieByShowingId(showingId));
        model.addAttribute("theater", theatreRepo.findTheatreByShowingId(showingId));
        model.addAttribute("seatMatrix", showingRepo.findTakenSeats(showingId));
        model.addAttribute("showing", showingRepo.findShowingById(showingId));
        //we decided to create an TicketReservaationForm object that contains 4 ticket objects instead of an array because
        //thymeleaf was creating some problems when we wanted to modify the objects inside the array
        model.addAttribute("tickets", new TicketReservationForm());
        try {
            if(principal.getAccessLevel().equalsIgnoreCase("CUSTOMER")) {
                return "/showing/reserve-ticket"; //add "you've reserved a ticket" page
            }
        } catch(Exception e) {
            return "/showing/employee-reserve-ticket";
        }
        return "/showing/employee-reserve-ticket";
    }


    @PostMapping(value = "/movies/showings/reserve/{showingId}")
    public String handleReserve(@ModelAttribute TicketReservationForm tickets, @PathVariable int showingId) {
        Customer customer = new Customer();
        try {
            if (principal.getAccessLevel().equalsIgnoreCase("CUSTOMER")) {
                customer = customerRepo.findCustomer(principal.getPrincipal_id());
            } else {
                customer = customerRepo.insertCustomer(tickets.getCustomer());
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("EXCEPTION AT handleReserve PRINCIPAL CUSTOMER");
        }



        //we cannot use a loop (which would be more elegant) because of TicketReservationForm format and that is made the way it is
        //because we had problems with modifying arrays through forms

        boolean allOK = true;
        boolean selected = false;
        //first 2 conditions are checking if anything was selected and the 3rd checks if it's already reserved
        if(tickets.getTicket1().getSeat_row() != 0 &&
                tickets.getTicket1().getSeat_nb() != 0 &&
                ticketRepo.validateTicketAvailability(tickets.getTicket1(), showingId)){

            ticketRepo.insertTicketInDB(tickets.getTicket1(), showingId, customer);

            // Write QR message and send to correct recipient
            qRwriter.writeQR(tickets.getTicket1(), showingId);
            System.out.println(customer.getEmail());
            String[] recipients = { customer.getEmail() };
            qRsender.sendEmail(recipients, "QRCODE5_BioTrioTicket");

            //qRsender.sendSMS();

            selected = true;
        } else if(tickets.getTicket2().getSeat_row() != 0 && tickets.getTicket2().getSeat_nb() != 0)
            allOK = false ;
        if (tickets.getTicket2().getSeat_row() != 0 &&
                tickets.getTicket2().getSeat_nb() != 0 &&
                ticketRepo.validateTicketAvailability(tickets.getTicket2(), showingId)){

            ticketRepo.insertTicketInDB(tickets.getTicket2(), showingId, customer);

            // Write QR message and send to correct recipient
            qRwriter.writeQR(tickets.getTicket2(), showingId);
            String[] recipients = { customer.getEmail() };
            qRsender.sendEmail(recipients, "QRCODE5_BioTrioTicket");

            selected = true;
        } else if(tickets.getTicket2().getSeat_row() != 0 && tickets.getTicket2().getSeat_nb() != 0)
            allOK = false ;
        if (tickets.getTicket3().getSeat_row() != 0 &&
                tickets.getTicket3().getSeat_nb() != 0 &&
                ticketRepo.validateTicketAvailability(tickets.getTicket3(), showingId)){

            ticketRepo.insertTicketInDB(tickets.getTicket3(), showingId, customer);


            // Write QR message and send to correct recipient
            qRwriter.writeQR(tickets.getTicket3(), showingId);
            String[] recipients = { customer.getEmail() };
            qRsender.sendEmail(recipients, "QRCODE5_BioTrioTicket");

            selected = true;
        } else if(tickets.getTicket2().getSeat_row() != 0 && tickets.getTicket2().getSeat_nb() != 0)

            allOK = false ;
        if (tickets.getTicket4().getSeat_row() != 0 &&
                tickets.getTicket4().getSeat_nb() != 0 &&
                ticketRepo.validateTicketAvailability(tickets.getTicket4(), showingId)){

            ticketRepo.insertTicketInDB(tickets.getTicket4(), showingId, customer);


            // Write QR message and send to correct recipient
            qRwriter.writeQR(tickets.getTicket4(), showingId);
            String[] recipients = { customer.getEmail() };
            qRsender.sendEmail(recipients, "QRCODE5_BioTrioTicket");
            selected = true;
        } else if(tickets.getTicket2().getSeat_row() != 0 && tickets.getTicket2().getSeat_nb() != 0)

            allOK = false ;
        if( allOK && selected) {
            return "redirect:/movies"; //add "you've reserved a ticket" page
        } else if(!allOK){
            return "redirect:/movies/showings/reserve/{showingId}?fail=true";
        } else{
            return "redirect:/movies/showings/reserve/{showingId}?empty=true";
        }
    }




    // repo


    public void insertTicketInDB (Ticket ticket, int showingId, Customer customer){
            PreparedStatementCreator psc = Connection -> {
                PreparedStatement ps = Connection.prepareStatement(
                        "INSERT INTO ticket VALUES (null, ?, ?, ?, ?, ?)", new String[]{"ticket_id"});
                ps.setInt(1, showingId);
                ps.setInt(2, customer.getId()); //TODO: add a customer id
                ps.setInt(3, ticket.getSeat_row());
                ps.setInt(4, ticket.getSeat_nb());
                ps.setBoolean(5, false);

                return ps;
            };

            try {
                KeyHolder keyholder = new GeneratedKeyHolder();
                jdbc.update(psc, keyholder);
            } catch (NullPointerException e) {
                System.out.println(e + " at INSERT ticket in our repository");
            }
        }